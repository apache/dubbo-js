// source: buf/connect/demo/eliza/v1/eliza.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this
  }.call(null) ||
  Function('return this')()

goog.exportSymbol(
  'proto.buf.connect.demo.eliza.v1.ConverseRequest',
  null,
  global
)
goog.exportSymbol(
  'proto.buf.connect.demo.eliza.v1.ConverseResponse',
  null,
  global
)
goog.exportSymbol(
  'proto.buf.connect.demo.eliza.v1.IntroduceRequest',
  null,
  global
)
goog.exportSymbol(
  'proto.buf.connect.demo.eliza.v1.IntroduceResponse',
  null,
  global
)
goog.exportSymbol('proto.buf.connect.demo.eliza.v1.SayRequest', null, global)
goog.exportSymbol('proto.buf.connect.demo.eliza.v1.SayResponse', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buf.connect.demo.eliza.v1.SayRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.buf.connect.demo.eliza.v1.SayRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buf.connect.demo.eliza.v1.SayRequest.displayName =
    'proto.buf.connect.demo.eliza.v1.SayRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buf.connect.demo.eliza.v1.SayResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.buf.connect.demo.eliza.v1.SayResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buf.connect.demo.eliza.v1.SayResponse.displayName =
    'proto.buf.connect.demo.eliza.v1.SayResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.buf.connect.demo.eliza.v1.ConverseRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buf.connect.demo.eliza.v1.ConverseRequest.displayName =
    'proto.buf.connect.demo.eliza.v1.ConverseRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.buf.connect.demo.eliza.v1.ConverseResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buf.connect.demo.eliza.v1.ConverseResponse.displayName =
    'proto.buf.connect.demo.eliza.v1.ConverseResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.buf.connect.demo.eliza.v1.IntroduceRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buf.connect.demo.eliza.v1.IntroduceRequest.displayName =
    'proto.buf.connect.demo.eliza.v1.IntroduceRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.buf.connect.demo.eliza.v1.IntroduceResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buf.connect.demo.eliza.v1.IntroduceResponse.displayName =
    'proto.buf.connect.demo.eliza.v1.IntroduceResponse'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.buf.connect.demo.eliza.v1.SayRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.buf.connect.demo.eliza.v1.SayRequest.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.buf.connect.demo.eliza.v1.SayRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.buf.connect.demo.eliza.v1.SayRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sentence: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buf.connect.demo.eliza.v1.SayRequest}
 */
proto.buf.connect.demo.eliza.v1.SayRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.buf.connect.demo.eliza.v1.SayRequest()
  return proto.buf.connect.demo.eliza.v1.SayRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buf.connect.demo.eliza.v1.SayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buf.connect.demo.eliza.v1.SayRequest}
 */
proto.buf.connect.demo.eliza.v1.SayRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSentence(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buf.connect.demo.eliza.v1.SayRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.buf.connect.demo.eliza.v1.SayRequest.serializeBinaryToWriter(
      this,
      writer
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buf.connect.demo.eliza.v1.SayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buf.connect.demo.eliza.v1.SayRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getSentence()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string sentence = 1;
 * @return {string}
 */
proto.buf.connect.demo.eliza.v1.SayRequest.prototype.getSentence = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.buf.connect.demo.eliza.v1.SayRequest} returns this
 */
proto.buf.connect.demo.eliza.v1.SayRequest.prototype.setSentence = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.buf.connect.demo.eliza.v1.SayResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.buf.connect.demo.eliza.v1.SayResponse.toObject(
      opt_includeInstance,
      this
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.buf.connect.demo.eliza.v1.SayResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.buf.connect.demo.eliza.v1.SayResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sentence: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buf.connect.demo.eliza.v1.SayResponse}
 */
proto.buf.connect.demo.eliza.v1.SayResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.buf.connect.demo.eliza.v1.SayResponse()
  return proto.buf.connect.demo.eliza.v1.SayResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buf.connect.demo.eliza.v1.SayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buf.connect.demo.eliza.v1.SayResponse}
 */
proto.buf.connect.demo.eliza.v1.SayResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSentence(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buf.connect.demo.eliza.v1.SayResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.buf.connect.demo.eliza.v1.SayResponse.serializeBinaryToWriter(
      this,
      writer
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buf.connect.demo.eliza.v1.SayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buf.connect.demo.eliza.v1.SayResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined
  f = message.getSentence()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string sentence = 1;
 * @return {string}
 */
proto.buf.connect.demo.eliza.v1.SayResponse.prototype.getSentence =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.buf.connect.demo.eliza.v1.SayResponse} returns this
 */
proto.buf.connect.demo.eliza.v1.SayResponse.prototype.setSentence = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.buf.connect.demo.eliza.v1.ConverseRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.buf.connect.demo.eliza.v1.ConverseRequest.toObject(
        opt_includeInstance,
        this
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.buf.connect.demo.eliza.v1.ConverseRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.buf.connect.demo.eliza.v1.ConverseRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sentence: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buf.connect.demo.eliza.v1.ConverseRequest}
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.buf.connect.demo.eliza.v1.ConverseRequest()
  return proto.buf.connect.demo.eliza.v1.ConverseRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buf.connect.demo.eliza.v1.ConverseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buf.connect.demo.eliza.v1.ConverseRequest}
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSentence(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.buf.connect.demo.eliza.v1.ConverseRequest.serializeBinaryToWriter(
      this,
      writer
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buf.connect.demo.eliza.v1.ConverseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getSentence()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
  }

/**
 * optional string sentence = 1;
 * @return {string}
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest.prototype.getSentence =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.buf.connect.demo.eliza.v1.ConverseRequest} returns this
 */
proto.buf.connect.demo.eliza.v1.ConverseRequest.prototype.setSentence =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.buf.connect.demo.eliza.v1.ConverseResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.buf.connect.demo.eliza.v1.ConverseResponse.toObject(
        opt_includeInstance,
        this
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.buf.connect.demo.eliza.v1.ConverseResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.buf.connect.demo.eliza.v1.ConverseResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sentence: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buf.connect.demo.eliza.v1.ConverseResponse}
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.buf.connect.demo.eliza.v1.ConverseResponse()
  return proto.buf.connect.demo.eliza.v1.ConverseResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buf.connect.demo.eliza.v1.ConverseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buf.connect.demo.eliza.v1.ConverseResponse}
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSentence(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.buf.connect.demo.eliza.v1.ConverseResponse.serializeBinaryToWriter(
      this,
      writer
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buf.connect.demo.eliza.v1.ConverseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getSentence()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
  }

/**
 * optional string sentence = 1;
 * @return {string}
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse.prototype.getSentence =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.buf.connect.demo.eliza.v1.ConverseResponse} returns this
 */
proto.buf.connect.demo.eliza.v1.ConverseResponse.prototype.setSentence =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.buf.connect.demo.eliza.v1.IntroduceRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.buf.connect.demo.eliza.v1.IntroduceRequest.toObject(
        opt_includeInstance,
        this
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.buf.connect.demo.eliza.v1.IntroduceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.buf.connect.demo.eliza.v1.IntroduceRequest.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buf.connect.demo.eliza.v1.IntroduceRequest}
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.buf.connect.demo.eliza.v1.IntroduceRequest()
  return proto.buf.connect.demo.eliza.v1.IntroduceRequest.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buf.connect.demo.eliza.v1.IntroduceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buf.connect.demo.eliza.v1.IntroduceRequest}
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setName(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.buf.connect.demo.eliza.v1.IntroduceRequest.serializeBinaryToWriter(
      this,
      writer
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buf.connect.demo.eliza.v1.IntroduceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getName()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
  }

/**
 * optional string name = 1;
 * @return {string}
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest.prototype.getName =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.buf.connect.demo.eliza.v1.IntroduceRequest} returns this
 */
proto.buf.connect.demo.eliza.v1.IntroduceRequest.prototype.setName = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.buf.connect.demo.eliza.v1.IntroduceResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.buf.connect.demo.eliza.v1.IntroduceResponse.toObject(
        opt_includeInstance,
        this
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.buf.connect.demo.eliza.v1.IntroduceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.buf.connect.demo.eliza.v1.IntroduceResponse.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        sentence: jspb.Message.getFieldWithDefault(msg, 1, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buf.connect.demo.eliza.v1.IntroduceResponse}
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.buf.connect.demo.eliza.v1.IntroduceResponse()
  return proto.buf.connect.demo.eliza.v1.IntroduceResponse.deserializeBinaryFromReader(
    msg,
    reader
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buf.connect.demo.eliza.v1.IntroduceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buf.connect.demo.eliza.v1.IntroduceResponse}
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSentence(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.buf.connect.demo.eliza.v1.IntroduceResponse.serializeBinaryToWriter(
      this,
      writer
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buf.connect.demo.eliza.v1.IntroduceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getSentence()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
  }

/**
 * optional string sentence = 1;
 * @return {string}
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse.prototype.getSentence =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.buf.connect.demo.eliza.v1.IntroduceResponse} returns this
 */
proto.buf.connect.demo.eliza.v1.IntroduceResponse.prototype.setSentence =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

goog.object.extend(exports, proto.buf.connect.demo.eliza.v1)
